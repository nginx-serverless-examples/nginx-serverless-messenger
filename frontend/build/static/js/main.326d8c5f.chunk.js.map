{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["API_GATEWAY_ID","App","props","closeWebSocket","timer","clearInterval","websocket","close","connectToWebScoket","address","WebSocket","onopen","console","log","setInterval","send","JSON","stringify","message","onmessage","obj","parse","data","onMessageReceived","onclose","event","onerror","error","componentDidMount","a","state","axios","method","url","params","room_id","result","setState","set","moment","valueOf","timestamp","list","get","push","onSend","text","user_id","name","getMessageList","userId","messageList","forEach","model","sentTime","sender","direction","Map","messages","undefined","style","position","height","this","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.326d8c5f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport axios from 'axios';\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Map, List, Record } from 'immutable';\nimport moment from 'moment';\n\nconst API_GATEWAY_ID = \"hi4dwhkd84\"\nconst SOCKET_API_GATEWAY_ID = \"1twejkp3k8\"\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: Map(\n        {\n          messageList: [],\n          messages: []\n        })\n    }\n    this.websocket = undefined;\n    this.timer = undefined;\n  }\n  closeWebSocket = () => {\n\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n  }\n  connectToWebScoket = () => {\n    const address = `wss://${SOCKET_API_GATEWAY_ID}.execute-api.ap-northeast-2.amazonaws.com/dev?user_id=test&room_id=test`\n    this.websocket = new WebSocket(address);\n\n    this.websocket.onopen = () => {\n\n      console.log(\"open\")\n      this.timer = setInterval(() => {\n        this.websocket.send(JSON.stringify({ message: 'ping' }));\n      }, 60 * 1000);\n    };\n\n    this.websocket.onmessage = (message) => {\n\n      let obj = JSON.parse(message.data);\n      this.onMessageReceived(obj);\n\n\n\n    };\n\n    this.websocket.onclose = (event) => {\n      console.log('onclose');\n      if (this.timer || this.websocket) this.closeWebSocket();\n    };\n\n    this.websocket.onerror = (event) => {\n      console.error('WebSocket error observed:', event);\n      if (this.timer || this.websocket) this.closeWebSocket();\n    };\n  }\n  componentDidMount = async () => {\n    const { data } = this.state;\n    const result = await axios({\n      method: 'GET',\n      url: `https://${API_GATEWAY_ID}.execute-api.ap-northeast-2.amazonaws.com/dev/chat`,\n      params: {\n        room_id: \"test\"\n      }\n    });;\n\n    this.setState({\n      data: data.set(\"messages\", result.data).set(\"user_id\", moment().valueOf())\n    })\n\n    this.connectToWebScoket();\n  }\n  onMessageReceived = async (message) => {\n    console.log(message)\n    if (message.timestamp) {\n      const { data } = this.state;\n      let list = data.get(\"messages\");\n      list.push(message)\n      console.log(list);\n      this.setState({\n        data: data.set(\"messages\", list)\n      })\n    }\n  }\n  onSend = async (message) => {\n    const { data } = this.state;\n    const result = await axios({\n      method: 'PUT',\n      url: `https://${API_GATEWAY_ID}.execute-api.ap-northeast-2.amazonaws.com/dev/chat`,\n      data: {\n        room_id: \"test\",\n        text: message,\n        user_id: data.get(\"user_id\"),\n        name: \"name_test\"\n\n      }\n    });;\n  }\n  getMessageList = () => {\n\n    const { data } = this.state;\n    const userId = data.get(\"user_id\");\n    let messageList = [];\n    data.get(\"messages\").forEach((message) => {\n      messageList.push(<Message\n        key={message.timestamp}\n        model={{\n          message: message.message,\n          sentTime: \"just now\",\n          sender: \"Joe\",\n          direction: (userId == message.user_id) ? \"outgoing\" : \"not\",\n        }}\n      />\n      );\n    })\n    // messageList.push(<Message\n    //   model={{\n    //     message: \"test\",\n    //     sentTime: \"just now\",\n    //     sender: \"Joe\",\n    //   }}\n    // />\n    // );\n    // messageList.push(\n    //   <Message model={{\n    //     message: \"Hello my friend\",\n    //     sentTime: \"just now\",\n    //     sender: \"Akane\",\n    //     direction: \"outgoing\",\n    //     position: \"single\"\n    //   }} />\n\n    return messageList;\n\n  }\n\n  render() {\n\n    return (\n\n      // Your JSX...\n\n      <div style={{ position: \"relative\", height: \"500px\" }}>\n        <MainContainer>\n          <ChatContainer>\n            <MessageList>\n              {this.getMessageList()}\n            </MessageList>\n            <MessageInput placeholder=\"Type message here\" onSend={this.onSend} />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n\n    )\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}